/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const SignupLazyImport = createFileRoute('/signup')()
const LoginLazyImport = createFileRoute('/login')()
const AttractionsLazyImport = createFileRoute('/attractions')()
const AttractionLazyImport = createFileRoute('/attraction')()
const AdminLazyImport = createFileRoute('/admin')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const SignupLazyRoute = SignupLazyImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/signup.lazy').then((d) => d.Route))

const LoginLazyRoute = LoginLazyImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/login.lazy').then((d) => d.Route))

const AttractionsLazyRoute = AttractionsLazyImport.update({
  id: '/attractions',
  path: '/attractions',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/attractions.lazy').then((d) => d.Route))

const AttractionLazyRoute = AttractionLazyImport.update({
  id: '/attraction',
  path: '/attraction',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/attraction.lazy').then((d) => d.Route))

const AdminLazyRoute = AdminLazyImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/admin.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminLazyImport
      parentRoute: typeof rootRoute
    }
    '/attraction': {
      id: '/attraction'
      path: '/attraction'
      fullPath: '/attraction'
      preLoaderRoute: typeof AttractionLazyImport
      parentRoute: typeof rootRoute
    }
    '/attractions': {
      id: '/attractions'
      path: '/attractions'
      fullPath: '/attractions'
      preLoaderRoute: typeof AttractionsLazyImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginLazyImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/admin': typeof AdminLazyRoute
  '/attraction': typeof AttractionLazyRoute
  '/attractions': typeof AttractionsLazyRoute
  '/login': typeof LoginLazyRoute
  '/signup': typeof SignupLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/admin': typeof AdminLazyRoute
  '/attraction': typeof AttractionLazyRoute
  '/attractions': typeof AttractionsLazyRoute
  '/login': typeof LoginLazyRoute
  '/signup': typeof SignupLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/admin': typeof AdminLazyRoute
  '/attraction': typeof AttractionLazyRoute
  '/attractions': typeof AttractionsLazyRoute
  '/login': typeof LoginLazyRoute
  '/signup': typeof SignupLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/attraction'
    | '/attractions'
    | '/login'
    | '/signup'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/admin' | '/attraction' | '/attractions' | '/login' | '/signup'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/attraction'
    | '/attractions'
    | '/login'
    | '/signup'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AdminLazyRoute: typeof AdminLazyRoute
  AttractionLazyRoute: typeof AttractionLazyRoute
  AttractionsLazyRoute: typeof AttractionsLazyRoute
  LoginLazyRoute: typeof LoginLazyRoute
  SignupLazyRoute: typeof SignupLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AdminLazyRoute: AdminLazyRoute,
  AttractionLazyRoute: AttractionLazyRoute,
  AttractionsLazyRoute: AttractionsLazyRoute,
  LoginLazyRoute: LoginLazyRoute,
  SignupLazyRoute: SignupLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.jsx",
      "children": [
        "/",
        "/admin",
        "/attraction",
        "/attractions",
        "/login",
        "/signup"
      ]
    },
    "/": {
      "filePath": "index.lazy.jsx"
    },
    "/admin": {
      "filePath": "admin.lazy.jsx"
    },
    "/attraction": {
      "filePath": "attraction.lazy.jsx"
    },
    "/attractions": {
      "filePath": "attractions.lazy.jsx"
    },
    "/login": {
      "filePath": "login.lazy.jsx"
    },
    "/signup": {
      "filePath": "signup.lazy.jsx"
    }
  }
}
ROUTE_MANIFEST_END */
